<?php

namespace Cradle\Image;

use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:01.
 */
class Cradle_Image_ImageHandler_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var ImageHandler
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ImageHandler(__DIR__.'/../assets/image/foobar.png', 'png');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
		$this->object->__destruct();
    }

    /**
     * @covers Cradle\Image\ImageHandler::__destruct
     */
    public function test__destruct()
    {
		$this->object->__destruct();
		
		$this->assertNull($this->object->getResource());
    }

    /**
     * @covers Cradle\Image\ImageHandler::__toString
     */
    public function test__toString()
    {
		$actual = base64_encode($this->object->__toString());
		
		$this->assertTrue(!!strlen($actual));
    }

    /**
     * @covers Cradle\Image\ImageHandler::blur
     */
    public function testBlur()
    {
		$instance = $this->object->blur();
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::brightness
     */
    public function testBrightness()
    {
		$instance = $this->object->brightness(10);
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::colorize
     */
    public function testColorize()
    {
		$instance = $this->object->colorize(255, 0, 0);
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::contrast
     */
    public function testContrast()
    {
		$instance = $this->object->contrast(10);
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::crop
     */
    public function testCrop()
    {
		$instance = $this->object->crop(10);
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::edgedetect
     */
    public function testEdgedetect()
    {
		$instance = $this->object->edgedetect();
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::emboss
     */
    public function testEmboss()
    {
		$instance = $this->object->emboss();
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::gaussianBlur
     */
    public function testGaussianBlur()
    {
		$instance = $this->object->gaussianBlur();
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::getDimensions
     */
    public function testGetDimensions()
    {
		$actual = $this->object->getDimensions();
		$this->assertTrue(is_array($actual));
    }

    /**
     * @covers Cradle\Image\ImageHandler::getResource
     */
    public function testGetResource()
    {
		$resource = $this->object->getResource();

		$this->assertTrue(imagesx($resource) > 0);
    }

    /**
     * @covers Cradle\Image\ImageHandler::greyscale
     */
    public function testGreyscale()
    {
		$instance = $this->object->greyscale();
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::invert
     */
    public function testInvert()
    {
		$instance = $this->object->invert();
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::meanRemoval
     */
    public function testMeanRemoval()
    {
		$instance = $this->object->meanRemoval();
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::negative
     */
    public function testNegative()
    {
		$instance = $this->object->negative();
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::resize
     */
    public function testResize()
    {
		$instance = $this->object->resize(10, 10);
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::rotate
     */
    public function testRotate()
    {
		$instance = $this->object->rotate(10);
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::scale
     */
    public function testScale()
    {
		$instance = $this->object->scale(10, 10);
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::setTransparency
     */
    public function testSetTransparency()
    {
		$instance = $this->object->setTransparency();
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::smooth
     */
    public function testSmooth()
    {
		$instance = $this->object->smooth(10);
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::save
     */
    public function testSave()
    {
        $instance = $this->object->save('/tmp/foobar.png', 'png');
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance);
    }

    /**
     * @covers Cradle\Image\ImageHandler::i
     */
    public function testI()
    {
        $instance1 = ImageHandler::i(__DIR__.'/../assets/image/foobar.png', 'png');
		
		$this->assertInstanceOf('Cradle\Image\ImageHandler', $instance1);
		
		$instance2 = ImageHandler::i(__DIR__.'/../assets/image/foobar.png', 'png');
		
		$this->assertTrue($instance1 !== $instance2);
    }
}
