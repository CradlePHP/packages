<?php

namespace Cradle\Event;

use StdClass;
use PHPUnit_Framework_TestCase;
use Cradle\Resolver\ResolverHandler;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:00.
 */
class Cradle_Event_EventHandler_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var EventHandler
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new EventHandler;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
		$this->object->off('foobar');
    }

    /**
     * @covers Cradle\Event\EventHandler::off
     */
    public function testOff()
    {
		$trigger = new StdClass();
		$trigger->success = null;
		
        $callback = function() use ($trigger) {
			$trigger->success = true;
		};
		
		$this
			->object
			->on('foobar', $callback)
			->off('foobar')
			->trigger('foobar');
		
		$this->assertNull($trigger->success);
    }

    /**
     * @covers Cradle\Event\EventHandler::on
     */
    public function testOn()
    {
        $trigger = new StdClass();
		$trigger->success = null;
		
        $callback = function() use ($trigger) {
			$trigger->success = true;
		};
		
		$instance = $this
			->object
			->on('foobar', $callback)
			->trigger('foobar');
		
		$this->assertInstanceOf('Cradle\Event\EventHandler', $instance);
		$this->assertTrue($trigger->success);
    }

    /**
     * @covers Cradle\Event\EventHandler::trigger
     */
    public function testTrigger()
    {
        $trigger = new StdClass();
		$trigger->success = null;
		$trigger->test = $this;
		
        $callback = function($foo, $bar) use ($trigger) {
			$trigger->success = true;
			$trigger->test->assertEquals(1, $foo);
			$trigger->test->assertEquals(2, $bar);
		};
		
		$instance = $this
			->object
			->on('foobar', $callback)
			->trigger('foobar', 1, 2);
		
		$this->assertInstanceOf('Cradle\Event\EventHandler', $instance);
		$this->assertTrue($trigger->success);
    }

    /**
     * @covers Cradle\Event\EventHandler::__callResolver
     */
    public function test__callResolver()
    {
        $actual = $this->object->__callResolver(ResolverCallStub::class, [])->foo('bar');
		$this->assertEquals('barfoo', $actual);
    }

    /**
     * @covers Cradle\Event\EventHandler::addResolver
     */
    public function testAddResolver()
    {
        $actual = $this->object->addResolver(ResolverCallStub::class, function() {});
		$this->assertInstanceOf('Cradle\Event\EventHandler', $actual);
    }

    /**
     * @covers Cradle\Event\EventHandler::getResolverHandler
     */
    public function testGetResolverHandler()
    {
		$actual = $this->object->getResolverHandler();
		$this->assertInstanceOf('Cradle\Resolver\ResolverInterface', $actual);
    }

    /**
     * @covers Cradle\Event\EventHandler::resolve
     */
    public function testResolve()
    {
		$actual = $this->object->addResolver(
			ResolverCallStub::class, 
			function() {
				return new ResolverAddStub();
			}
		)
		->resolve(ResolverCallStub::class)
		->foo('bar');
		
        $this->assertEquals('barfoo', $actual);
    }

    /**
     * @covers Cradle\Event\EventHandler::resolveShared
     */
    public function testResolveShared()
    {
        $actual = $this
			->object
			->resolveShared(ResolverSharedStub::class)
			->reset()
			->foo('bar');
		
        $this->assertEquals('barfoo', $actual);
		
		$actual = $this
			->object
			->resolveShared(ResolverSharedStub::class)
			->foo('bar');
		
        $this->assertEquals('barbar', $actual);
    }

    /**
     * @covers Cradle\Event\EventHandler::resolveStatic
     */
    public function testResolveStatic()
    {
        $actual = $this
			->object
			->resolveStatic(
				ResolverStaticStub::class, 
				'foo', 
				'bar'
			);
		
        $this->assertEquals('barfoo', $actual);
    }

    /**
     * @covers Cradle\Event\EventHandler::setResolverHandler
     */
    public function testSetResolverHandler()
    {
        $actual = $this->object->setResolverHandler(new ResolverHandlerStub);
		$this->assertInstanceOf('Cradle\Event\EventHandler', $actual);
    }
}

if(!class_exists('Cradle\Event\ResolverCallStub')) {
	class ResolverCallStub
	{
		public function foo($string)
		{
			return $string . 'foo';
		}
	}
}

if(!class_exists('Cradle\Event\ResolverAddStub')) {
	class ResolverAddStub
	{
		public function foo($string)
		{
			return $string . 'foo';
		}
	}
}

if(!class_exists('Cradle\Event\ResolverSharedStub')) {
	class ResolverSharedStub
	{
		public $name = 'foo';
		
		public function foo($string)
		{
			$name = $this->name;
			$this->name = $string;
			return $string . $name;
		}
		
		public function reset()
		{
			$this->name = 'foo';
			return $this;
		}
	}
}

if(!class_exists('Cradle\Event\ResolverStaticStub')) {
	class ResolverStaticStub
	{
		public static function foo($string)
		{
			return $string . 'foo';
		}
	}
}

if(!class_exists('Cradle\Event\ResolverHandlerStub')) {
	class ResolverHandlerStub extends ResolverHandler
	{
	}
}
