<?php 

namespace Cradle\Sql;

use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:02.
 */
class Cradle_Sql_Collection_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var Collection
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Collection;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Cradle\Sql\Collection::getModel
     */
    public function testGetModel()
    {
        $instance = $this->object->getModel();
		$this->assertInstanceOf('Cradle\Sql\Model', $instance);
    }

    /**
     * @covers Cradle\Sql\Collection::setDatabase
     */
    public function testSetDatabase()
    {
        $instance = $this->object->setDatabase(new AbstractSqlStub);
		$this->assertInstanceOf('Cradle\Sql\Collection', $instance);
    }

    /**
     * @covers Cradle\Sql\Collection::setTable
     * @todo   Implement testSetTable().
     */
    public function testSetTable()
    {
        $instance = $this->object->setTable('foobar');
		$this->assertInstanceOf('Cradle\Sql\Collection', $instance);
    }
}

if(!class_exists('Cradle\Sql\AbstractSqlStub')) {
	class AbstractSqlStub extends AbstractSql implements SqlInterface
	{
		public function connect($options = [])
		{
			$this->connection = 'foobar';
			return $this;
		}
		
		public function getLastInsertedId($column = null)
		{
			return 123;
		}
		
		public function query($query, array $binds = [])
    	{
			return array(array(
				'query' => (string) $query, 
				'binds' => $binds
			));
		}
	}
}
