<?php 

namespace Cradle\Sql;

use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-27 at 02:11:02.
 */
class Cradle_Sql_Model_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var Model
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Model();
		$this->object
			->setDatabase(new AbstractSqlStub)
			->setFoobarTitle('Foo Bar 1')
			->setFoobarDate('January 12, 2015');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Cradle\Sql\Model::formatTime
     */
    public function testFormatTime()
    {
		$actual = $this->object->formatTime('foobar_date');
		$this->assertEquals('2015-01-12 12:00:00', $actual->getFoobarDate());
    }

    /**
     * @covers Cradle\Sql\Model::insert
     */
    public function testInsert()
    {
		$instance = $this->object->insert('foo');
		$this->assertInstanceOf('Cradle\Sql\Model', $instance);
		$this->assertEquals(123, $this->object->getFoobarId());
    }

    /**
     * @covers Cradle\Sql\Model::remove
     */
    public function testRemove()
    {
		$instance = $this->object->remove('foo');
		$this->assertInstanceOf('Cradle\Sql\Model', $instance);
    }

    /**
     * @covers Cradle\Sql\Model::save
     */
    public function testSave()
    {
		$instance = $this->object->save('foo');
		$this->assertInstanceOf('Cradle\Sql\Model', $instance);
    }

    /**
     * @covers Cradle\Sql\Model::setDatabase
     */
    public function testSetDatabase()
    {
        $instance = $this->object->setDatabase(new AbstractSqlStub);
		$this->assertInstanceOf('Cradle\Sql\Model', $instance);
    }

    /**
     * @covers Cradle\Sql\Model::setTable
     * @todo   Implement testSetTable().
     */
    public function testSetTable()
    {
		$instance = $this->object->setTable('foo');
		$this->assertInstanceOf('Cradle\Sql\Model', $instance);
    }

    /**
     * @covers Cradle\Sql\Model::update
     * @todo   Implement testUpdate().
     */
    public function testUpdate()
    {
		$instance = $this->object->setFoobarId(321)->update('foo');
		$this->assertInstanceOf('Cradle\Sql\Model', $instance);
    }
}

if(!class_exists('Cradle\Sql\AbstractSqlStub')) {
	class AbstractSqlStub extends AbstractSql implements SqlInterface
	{
		public function connect($options = [])
		{
			$this->connection = 'foobar';
			return $this;
		}
		
		public function getLastInsertedId($column = null)
		{
			return 123;
		}
		
		public function query($query, array $binds = [])
    	{
			return array(array(
				'total' => 123,
				'query' => (string) $query, 
				'binds' => $binds
			));
		}
		
		public function getColumns()
		{
			return array(
				array(
					'Field' => 'foobar_id',
					'Type' => 'int',
					'Key' => 'PRI',
					'Default' => null,
					'Null' => 1
				),
				array(
					'Field' => 'foobar_title',
					'Type' => 'vachar',
					'Key' => null,
					'Default' => null,
					'Null' => 1
				),
				array(
					'Field' => 'foobar_date',
					'Type' => 'datetime',
					'Key' => null,
					'Default' => null,
					'Null' => 1
				)
			);
		}
	}
}
