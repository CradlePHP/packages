<?php

namespace Cradle\Http;

use PHPUnit_Framework_TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-07-28 at 11:36:33.
 * Magic replacer \n\s+\*\s\@todo\s+ Implement\s[a-zA-Z0-9]+\(\)\.
 */
class Cradle_Http_Response_Test extends PHPUnit_Framework_TestCase
{
    /**
     * @var Response
     */
    protected $object;

    /**
     * @var Response
     */
    protected $rest;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Response(array(
			'code' => 200,
			'headers' => array(
				'foo' => 'bar',
				'bar' => 'foo'
			),
			'body' => array(
				'foo' => 'bar',
				'bar' => 'foo'
			)
		));
		
		$this->rest = new Response(array(
			'code' => 200,
			'headers' => array(
				'foo' => 'bar',
				'bar' => 'foo'
			),
			'body' => array(
				'error' => true,
				'message' => 'foobar',
				'validation' => array(
					'foo' => 'bar',
					'bar' => 'foo'
				), 
				'results' => array(
					'foo' => 'bar',
					'bar' => 'foo'
				)
			)
		));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Cradle\Http\Response::load
     */
    public function testLoad()
    {
		$instance = $this->object->load();
		$this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * @covers Cradle\Http\Response::getContent
     */
    public function testGetContent()
    {
		$actual = $this->object->getContent();
		$this->assertArrayHasKey('foo', $actual);
		
		$actual = $this->object->getContent(true);
		
		$this->assertEquals(json_encode(array(
			'foo' => 'bar',
			'bar' => 'foo'
		), JSON_PRETTY_PRINT), $actual);
    }

    /**
     * @covers Cradle\Http\Response::hasContent
     */
    public function testHasContent()
    {
        $this->assertTrue($this->object->hasContent());
    }

    /**
     * @covers Cradle\Http\Response::isContentFlat
     */
    public function testIsContentFlat()
    {
        $this->assertFalse($this->object->isContentFlat());
    }

    /**
     * @covers Cradle\Http\Response::setContent
     */
    public function testSetContent()
    {
		$instance = $this->object->setContent('foobar');
		
		$this->assertInstanceOf('Cradle\Http\Response', $instance);
        $this->assertTrue($this->object->isContentFlat());
    }

    /**
     * @covers Cradle\Http\Response::addHeader
     */
    public function testAddHeader()
    {
		$instance = $this->object->addHeader('zoo', 'foo');
		$this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * @covers Cradle\Http\Response::getHeaders
     */
    public function testGetHeaders()
    {
		$actual = $this->object->getHeaders();
		$this->assertArrayHasKey('foo', $actual);
		$actual = $this->object->getHeaders('foo');
		$this->assertEquals('bar', $actual);
    }

    /**
     * @covers Cradle\Http\Response::addValidation
     */
    public function testAddValidation()
    {
		$instance = $this->rest->addValidation('zoo', 'foo');
		$this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * @covers Cradle\Http\Response::getResults
     */
    public function testGetResults()
    {
		$actual = $this->rest->getResults();
		$this->assertArrayHasKey('foo', $actual);
		$actual = $this->rest->getResults('foo');
		$this->assertEquals('bar', $actual);
    }

    /**
     * @covers Cradle\Http\Response::getValidation
     */
    public function testGetValidation()
    {
		$actual = $this->rest->getValidation();
		$this->assertArrayHasKey('foo', $actual);
		$actual = $this->rest->getValidation('foo');
		$this->assertEquals('bar', $actual);
    }

    /**
     * @covers Cradle\Http\Response::setError
     */
    public function testSetError()
    {
		$instance = $this->rest->setError(false);
		$this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * @covers Cradle\Http\Response::setResults
     */
    public function testSetResults()
    {
		$instance = $this->rest->setResults('zoo', 'foo');
		$this->assertInstanceOf('Cradle\Http\Response', $instance);
    }

    /**
     * @covers Cradle\Http\Response::getStatus
     */
    public function testGetStatus()
    {
		$code = $this->object->getStatus();
		$this->assertEquals(200, $code);
    }

    /**
     * @covers Cradle\Http\Response::setStatus
     */
    public function testSetStatus()
    {
		$instance = $this->object->setStatus(404, '404 Not Found');
		$this->assertInstanceOf('Cradle\Http\Response', $instance);
    }
}
